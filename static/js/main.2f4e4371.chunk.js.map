{"version":3,"sources":["redux/main-reducer.jsx","redux/filter-reducer.jsx","date/date-creatore.jsx","components/pagination.jsx","components/current-task.jsx","containers/current-task-container.jsx","components/to-do.jsx","containers/to-do-container.jsx","App.js","serviceWorker.js","redux/redux-store.jsx","index.js"],"names":["initialState","taskValue","tasks","getTaskValue","value","type","addTask","task","editStatus","id","deleteTask","removeAllDone","removeAllTasks","editTask","newTask","mainReducer","state","action","shortid","generate","status","map","filter","t","changeFilter","activeFilter","filtersReducer","i","Date","Pagination","changePage","tasksPerPage","pageNumbers","Math","ceil","length","push","className","number","key","href","onClick","CurrentTask","useState","currentPage","setCurrentPage","indexOfLastTask","indexOfFirstTask","filteredTasks","filterTasks","slice","el","index","aria-hidden","toLocaleString","day","weekday","month","pageNumber","CurrentTaskContainer","this","props","React","Component","connect","ToDoList","onChange","e","target","placeholder","onKeyDown","keyCode","some","ToDoContainer","App","Boolean","window","location","hostname","match","persistedState","serializedState","localStorage","getItem","JSON","parse","console","log","loadFromLocalStorage","reducers","combineReducers","store","createStore","subscribe","stringify","setItem","saveToLocalStorage","getState","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.2f4e4371.chunk.js","sourcesContent":["import shortid from 'shortid';\r\n\r\nconst GET_TASK_VALUE = 'GET_TASK_VALUE'\r\nconst ADD_TASK = 'ADD_TASK'\r\nconst EDIT_STATUS = 'EDIT_STATUS'\r\nconst TASK_DELETE = 'TASK_DELETE'\r\nconst REMOVE_ALL_DONE = 'REMOVE_ALL_DONE'\r\nconst REMOVE_ALL_TASKS = 'REMOVE_ALL_TASKS'\r\nconst EDIT_TASK = 'EDIT_TASK'\r\n\r\n\r\nconst initialState = {\r\n    taskValue: '',\r\n    tasks: []\r\n};\r\n\r\n\r\nconst mainReducer = (state = initialState, action) => {\r\n    switch (action.type) {\r\n        case GET_TASK_VALUE: {\r\n            return {\r\n                ...state,\r\n                taskValue: action.value\r\n            }\r\n        }\r\n    \r\n        case ADD_TASK: {\r\n            return {\r\n                ...state,\r\n                tasks: [{\r\n                    id: shortid.generate(),\r\n                    task: action.task,\r\n                    status: false\r\n                }, ...state.tasks]\r\n            }\r\n        }\r\n\r\n        case EDIT_STATUS: {\r\n            return {\r\n                ...state,\r\n                tasks: state.tasks.map(task => task.id === action.id ? {...task, status: !task.status} : task)\r\n            }\r\n        }\r\n\r\n        case TASK_DELETE: {\r\n            return {\r\n                ...state,\r\n                tasks: state.tasks.filter(t => t.id !== action.id)\r\n            }\r\n        }\r\n\r\n        case REMOVE_ALL_DONE: {\r\n            return {\r\n                ...state,\r\n                tasks: state.tasks.filter(t => !t.status)\r\n            }\r\n        }\r\n\r\n        case REMOVE_ALL_TASKS: {\r\n            return {\r\n                ...state,\r\n                tasks: []\r\n            }\r\n        }\r\n\r\n        case EDIT_TASK: {\r\n            return {\r\n                ...state, \r\n                tasks: state.tasks.map((t) => t.id === action.id ? {...t, task: action.newTask} : t)\r\n            }\r\n        }\r\n\r\n    default:\r\n        return state\r\n    }\r\n}\r\n\r\n//window.store.getState().mainReducer.tasks\r\nexport const getTaskValue = value => ({type: 'GET_TASK_VALUE',value})\r\nexport const addTask = task => ({type: 'ADD_TASK', task});\r\nexport const editStatus = id => ({type: 'EDIT_STATUS', id})\r\nexport const deleteTask = id => ({type: 'TASK_DELETE', id})\r\nexport const removeAllDone = () => ({type:'REMOVE_ALL_DONE'})\r\nexport const removeAllTasks = () => ({type: 'REMOVE_ALL_TASKS'})\r\nexport const editTask = (id,newTask) => ({type: 'EDIT_TASK', id, newTask})\r\n\r\nexport default mainReducer;\r\n\r\n\r\n","const CHANGE_FILTER = 'CHANGE_FILTER';\r\n\r\nconst baseFilter = 'all';\r\n\r\nconst filtersReducer = (state = baseFilter, action) => {\r\n    switch (action.type) {\r\n      case CHANGE_FILTER: {\r\n        return action.activeFilter;\r\n      }\r\n      default:\r\n        return state;\r\n    }\r\n  }\r\n\r\nexport const changeFilter = activeFilter => ({type: 'CHANGE_FILTER', activeFilter})\r\n\r\n\r\nexport default filtersReducer;","const i = new Date()\r\n\r\nexport let date = () => i.toLocaleString('en-gb', { day:'numeric', weekday: 'long', month: 'long' })","import React from 'react'\r\n\r\nconst Pagination = ({tasks, changePage,tasksPerPage}) => {\r\n\r\n    const pageNumbers = [];\r\n    for(let i = 1; i <= Math.ceil(tasks.length / tasksPerPage); i++){\r\n        pageNumbers.push(i)\r\n    }\r\n\r\n\r\n    return (\r\n        <ul className='pagination justify-content-center'>\r\n            {pageNumbers.length > 0 && <span>Pages: </span>}\r\n            {pageNumbers.map(number => \r\n                <li key={number} className='page-item'>\r\n                    <a href=\"#\" onClick={() => changePage(number)} className=\"page-link\">{number}</a>\r\n                </li>\r\n            )}\r\n        </ul>\r\n    )\r\n}\r\n\r\nexport default Pagination\r\n","import React, { useState } from 'react'\r\nimport { date } from '../date/date-creatore';\r\nimport Pagination from './pagination';\r\n\r\nfunction CurrentTask({tasks,editStatus,filter,deleteTask}) {\r\n\r\n    const filterTasks = (tasks, activeFilter) => {\r\n\r\n        switch (activeFilter) {\r\n          case 'done': {\r\n            return tasks.filter(t => t.status);\r\n          }\r\n          case 'active': {\r\n            return tasks.filter(t => !t.status);\r\n          }\r\n          default:\r\n            return tasks;\r\n        }\r\n      }\r\n\r\n    //pagination\r\n    const [currentPage, setCurrentPage] = useState(1);\r\n    const [tasksPerPage] = useState(5);\r\n\r\n    const indexOfLastTask = currentPage * tasksPerPage;\r\n    const indexOfFirstTask = indexOfLastTask - tasksPerPage;\r\n    const portionTasks = tasks.slice(indexOfFirstTask, indexOfLastTask);\r\n    const filteredTasks = filterTasks(portionTasks, filter);\r\n\r\n    const changePage = (pageNumber) => setCurrentPage(pageNumber)\r\n\r\n    return (\r\n        <div>\r\n            {filteredTasks.map((el,index) => \r\n                <div key={el.id} className='row justify-content-center box-container'>\r\n                    {el.status === false \r\n                        ?   <i onClick={() => editStatus(el.id)} className=\"fa fa-circle-o\" aria-hidden=\"true\"></i> \r\n                        :   <i onClick={() => editStatus(el.id)} className=\"fa fa-check-circle-o\" aria-hidden=\"true\"></i>\r\n                    }\r\n                    <div className='box-task col-sm-6 col-md-6'>\r\n                        <div className=\"number\">Task <span>№{index + 1}</span></div>\r\n                        <div className=\"date\">{date(new Date())}</div>\r\n                        <div className={el.status === false ? 'active' : 'done'}>\r\n                            <span>{el.task}</span>\r\n                        </div>\r\n                    </div>\r\n                    <i onClick={() => deleteTask(el.id)} className=\"fa fa-trash-o\" aria-hidden=\"true\"></i>\r\n                </div>\r\n            )}\r\n            <Pagination tasks={tasks} \r\n                        changePage={changePage}  \r\n                        tasksPerPage={tasksPerPage}\r\n            />\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default CurrentTask\r\n","import React from 'react'\r\nimport { addTask, editStatus, deleteTask,removeAllDone,removeAllTasks,editTask, getTaskValue} from '../redux/main-reducer';\r\nimport {changeFilter} from '../redux/filter-reducer'\r\nimport { connect } from 'react-redux';\r\nimport CurrentTask from '../components/current-task';\r\n\r\n\r\nclass CurrentTaskContainer extends React.Component {\r\n\r\n    render(){\r\n        return (\r\n            <CurrentTask {...this.props} />\r\n        )\r\n        \r\n    }\r\n}\r\n\r\n\r\nconst mapStateToProps = (state) => {\r\n    return {\r\n        tasks: state.mainReducer.tasks,\r\n        filter: state.filtersReducer,\r\n        taskValue: state.mainReducer.taskValue\r\n    }\r\n}\r\n\r\n\r\nexport default connect(mapStateToProps,{editStatus ,addTask,deleteTask,changeFilter,removeAllDone,removeAllTasks,editTask,getTaskValue})(CurrentTaskContainer)","import React from 'react'\r\nimport CurrentTaskContainer from '../containers/current-task-container'\r\n\r\nconst ToDoList = ({tasks,addTask,getTaskValue,taskValue,removeAllTasks,removeAllDone,changeFilter}) => {\r\n    \r\n    const addTaskKey = (e) => {\r\n        if(e.keyCode === 13) {\r\n            addTask(taskValue)\r\n            getTaskValue('')\r\n        }\r\n    }\r\n\r\n    const addTaskClick = () => {\r\n        if(taskValue.length > 0) {\r\n            addTask(taskValue)\r\n            getTaskValue('')\r\n        }else {\r\n            return null\r\n        }\r\n    }\r\n    \r\n    return (\r\n        <div className=\"container\">\r\n            <div className=\"row justify-content-center to-do-wrapper\">\r\n                <div className=\"col-lg-9 to-do-container\">\r\n                    <h1> It's me, <i>Tasker</i>.<br/> Let me refresh your memory. </h1>\r\n\r\n                    <input  onChange={e => getTaskValue(e.target.value)} \r\n                            value={taskValue} \r\n                            type='text' \r\n                            placeholder='Set your task...'\r\n                            onKeyDown={addTaskKey}\r\n                    />\r\n                    <button onClick={addTaskClick}>add</button>\r\n                    <button onClick={removeAllTasks}>clear</button>\r\n                    <h2>ACTIVE TASKS: <i>{tasks.filter(task => !task.status).length}</i></h2>\r\n\r\n                    <CurrentTaskContainer />\r\n\r\n                    <div className=\"filter-buttons\">\r\n                        <button onClick={() => changeFilter('all')}>all</button>\r\n                        <button onClick={() => changeFilter('done')}>done</button>\r\n                        <button onClick={() => changeFilter('active')}>active</button>\r\n                        {\r\n                            tasks.some(task => task.status)  \r\n                                ?   <button onClick={removeAllDone}>clear done</button> \r\n                                : null\r\n                        }\r\n                    </div>\r\n\r\n                    <div className='made'>Made by <i>Dima Kulikovskiy</i>&#169;2020</div>\r\n                    <div className='version'>Version: <i>2 .0</i></div>\r\n                </div>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default ToDoList\r\n","import React from 'react'\r\nimport { addTask, editStatus, deleteTask,removeAllDone,removeAllTasks,editTask, getTaskValue} from '../redux/main-reducer';\r\nimport {changeFilter} from '../redux/filter-reducer'\r\nimport { connect } from 'react-redux';\r\nimport ToDoList from '../components/to-do';\r\n\r\n\r\nclass ToDoContainer extends React.Component {\r\n\r\n    render(){\r\n        return (\r\n            <ToDoList {...this.props} />\r\n        )\r\n        \r\n    }\r\n}\r\n\r\n\r\nconst mapStateToProps = (state) => {\r\n    return {\r\n        tasks: state.mainReducer.tasks,\r\n        filter: state.filtersReducer,\r\n        taskValue: state.mainReducer.taskValue\r\n    }\r\n}\r\n\r\n\r\nexport default connect(mapStateToProps,{editStatus ,addTask,deleteTask,changeFilter,removeAllDone,removeAllTasks,editTask,getTaskValue})(ToDoContainer)","import React from 'react';\nimport ToDoContainer from './containers/to-do-container';\n\n\nconst App = () => {\n  return (\n    <div className=\"App\">\n      <ToDoContainer />\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import { combineReducers, createStore } from \"redux\";\r\nimport mainReducer from \"./main-reducer\";\r\nimport filtersReducer from \"./filter-reducer\"\r\n\r\nconst saveToLocalStorage = state => {\r\n    try {\r\n        let serializedState = JSON.stringify(state)\r\n        localStorage.setItem('state', serializedState)\r\n    } catch(e) {\r\n        console.log(e)\r\n    }\r\n}\r\n\r\nconst loadFromLocalStorage = () => {\r\n    try{\r\n        let serializedState = localStorage.getItem('state')\r\n        if(serializedState === null) return undefined\r\n        return JSON.parse(serializedState)\r\n    }catch(e) {\r\n        console.log(e)\r\n        return undefined\r\n    }\r\n}\r\n\r\nconst persistedState = loadFromLocalStorage()\r\n\r\nconst reducers = combineReducers({\r\n    mainReducer,\r\n    filtersReducer\r\n});\r\n\r\nconst store = createStore(reducers,persistedState);\r\n\r\nstore.subscribe( () => saveToLocalStorage(store.getState()))\r\n\r\nexport default store;\r\n","  \nimport React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.sass';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport { Provider } from 'react-redux';\nimport { HashRouter } from 'react-router-dom';\nimport store from './redux/redux-store';\n\n\n\n// HashRouter using for ghPage\nReactDOM.render(\n  <HashRouter>\n    <Provider store={store}>\n      <App />\n    </Provider>\n  </HashRouter>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();"],"sourceRoot":""}