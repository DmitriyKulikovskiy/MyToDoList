{"version":3,"sources":["App.module.css","components/current-tasks.jsx","components/filter-button-tasks.jsx","components/SetItem/item.jsx","components/tasks-list.jsx","components/SetItem/set-item.jsx","redux/main-reducer.jsx","redux/filter-reducer.jsx","components/SetItem/set-item-container.jsx","App.js","serviceWorker.js","redux/redux-store.jsx","index.js"],"names":["module","exports","CurrentTasks","tasks","className","s","currentTasks","filter","task","status","length","FilterButtonTasks","changeFilter","removeAllDone","filterButtonsBox","onClick","some","Item","props","item","editStatus","statusTask","src","taskFalse","deleteTask","close","ListTasks","map","t","id","key","SetForm","onInputChange","event","setState","target","name","value","handleSubmit","preventDefault","state","text","addTask","filterTasks","activeFilter","this","onSubmit","onChange","placeholder","setTask","add","React","Component","initialState","mainReducer","action","type","shortid","generate","filtersReducer","compose","connect","App","container","made","Boolean","window","location","hostname","match","reducers","combineReducers","store","createStore","applyMiddleware","thunkMiddleware","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.3c13728f.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"main-box\":\"App_main-box__3QpgH\",\"container\":\"App_container__2csWO\",\"currentTasks\":\"App_currentTasks__10M_S\",\"setTask\":\"App_setTask__2BJzV\",\"add\":\"App_add__3D2wN\",\"item\":\"App_item__1B0KE\",\"task\":\"App_task__3DKSB\",\"taskFalse\":\"App_taskFalse__4kbf3\",\"statusTask\":\"App_statusTask__2kSqu\",\"close\":\"App_close__XcBzj\",\"filterButtonsBox\":\"App_filterButtonsBox__3Ozar\",\"made\":\"App_made__1Jn2h\"};","import React from 'react'\r\nimport s from './../App.module.css'\r\n\r\n\r\nconst CurrentTasks = ({tasks}) => {\r\n    return (\r\n        <div className={s.currentTasks}> <b>Active tasks:</b> {tasks.filter(task => !task.status).length} </div>\r\n    )\r\n}\r\n\r\nexport default CurrentTasks;","import React from 'react'\r\nimport s from './../App.module.css'\r\n\r\nconst FilterButtonTasks = ({currentTasks,changeFilter,removeAllDone}) => {\r\n    \r\n    return (\r\n        <div className={s.filterButtonsBox}>\r\n            <button  onClick={() => changeFilter('all')}> all </button>\r\n            <button  onClick={() => changeFilter('done')}> done</button>\r\n            <button  onClick={() => changeFilter('active')}> active</button>\r\n            {currentTasks.some(task => task.status)  \r\n                ? <button onClick={removeAllDone}>Remove Done</button> \r\n                : null}\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default FilterButtonTasks;\r\n","import React from 'react'\nimport s from \"./../../App.module.css\";\n\n\nconst Item = (props) => {\n    return (\n        <div className={s.item}>\n        <span onClick={props.editStatus} className={s.statusTask}>\n            {props.status   ? <img src=\"https://img.icons8.com/doodle/48/000000/checkmark.png\"/> \n                            : <img src=\"https://img.icons8.com/emoji/48/000000/red-circle-emoji.png\"/>}\n        </span>\n        \n        <span className={props.status === true ? s.task : s.taskFalse}>{props.task}</span>\n\n\n        <span onClick={props.deleteTask} className={s.close}><img src=\"https://img.icons8.com/color/48/000000/close-window.png\"/></span>\n        \n    </div>\n    )\n}\n\nexport default Item;\n\n","import React from 'react'\r\nimport Item from './SetItem/item'\r\n\r\nconst ListTasks = ({currentTasks,editStatus,deleteTask}) => {\r\n    return (\r\n        currentTasks.map(t => (<Item editStatus={() => editStatus(t.id)}\r\n        deleteTask={() => deleteTask(t.id)}\r\n        key={t.id} task={t.task} status={t.status}/>))\r\n    )\r\n}\r\n\r\nexport default ListTasks;","import React from \"react\";\nimport s from \"./../../App.module.css\";\nimport CurrentTasks from \"../current-tasks\";\nimport FilterButtonTasks from \"../filter-button-tasks\";\nimport ListTasks from \"../tasks-list\";\n\nclass SetForm extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      text: ''\n    }\n  }\n\n  onInputChange = event => {\n    this.setState({\n      [event.target.name]: event.target.value\n    })\n  }\n\n  handleSubmit = event => {\n    event.preventDefault();\n\n    if(this.state.text === '') {\n      return undefined\n    } \n    this.props.addTask(this.state.text)\n    this.setState({\n      text: ''\n    })\n  }\n\n  filterTasks = (tasks, activeFilter) => {\n\n    switch (activeFilter) {\n      case 'done': {\n        return tasks.filter(task => task.status);\n      }\n      case 'active': {\n        return tasks.filter(task => !task.status)\n      }\n      default:\n        return tasks;\n    }\n  }\n\n\n  render() {\n    const currentTasks = this.filterTasks(this.props.tasks, this.props.filter);\n\n    return (\n      <div>\n        <form onSubmit={this.handleSubmit}>\n          <div>\n            <input name={\"text\"} onChange={this.onInputChange} value={this.state.text}placeholder={\"Set your task\"} className={s.setTask}/>\n            <button onClick={this.handleSubmit} className={s.add}>ADD</button>\n          </div> \n        </form>\n        <CurrentTasks tasks={this.props.tasks}/>\n        <ListTasks  currentTasks={currentTasks} editStatus={this.props.editStatus} deleteTask={this.props.deleteTask}/>\n        <FilterButtonTasks  currentTasks={currentTasks} changeFilter={this.props.changeFilter} removeAllDone={this.props.removeAllDone}/> \n      </div>\n    )\n  }\n}\n\n\n\nexport default SetForm;\n\n","import React from 'react'\r\nimport shortid from 'shortid';\r\n\r\nconst ADD_TASK = 'ADD_TASK'\r\nconst EDIT_STATUS = 'EDIT_STATUS'\r\nconst TASK_DELETE = 'TASK_DELETE'\r\nconst REMOVE_ALL_DONE = 'REMOVE_ALL_DONE'\r\n\r\nconst initialState = {\r\n    tasks: []\r\n};\r\n\r\n\r\n\r\nconst mainReducer = (state = initialState, action) => {\r\n    switch (action.type) {\r\n\r\n        case ADD_TASK: {\r\n            return {\r\n                ...state,\r\n                tasks: [{\r\n                    id: shortid.generate(),\r\n                    task: action.task,\r\n                    status: false\r\n                }, ...state.tasks]\r\n            }\r\n        }\r\n\r\n        case EDIT_STATUS: {\r\n            return {\r\n                ...state,\r\n                tasks: state.tasks.map(task => task.id === action.id ? {...task, status: !task.status} : task)\r\n            }\r\n        }\r\n\r\n        case TASK_DELETE: {\r\n            return {\r\n                ...state,\r\n                tasks: state.tasks.filter(t => t.id !== action.id)\r\n            }\r\n        }\r\n\r\n        case REMOVE_ALL_DONE: {\r\n            return {\r\n                ...state,\r\n                tasks: state.tasks.filter(t => !t.status)\r\n            }\r\n        }\r\n\r\n    default:\r\n        return state\r\n    }\r\n}\r\n\r\n\r\nexport const addTask = task => ({type: 'ADD_TASK', task});\r\nexport const editStatus = id => ({type: 'EDIT_STATUS', id})\r\nexport const deleteTask = id => ({type: 'TASK_DELETE', id})\r\nexport const removeAllDone = () => ({type:'REMOVE_ALL_DONE'})\r\n\r\n\r\nexport default mainReducer;\r\n\r\n\r\n","const CHANGE_FILTER = 'CHANGE_FILTER';\r\n\r\nconst baseFilter = 'all';\r\n\r\nconst filtersReducer = (state = baseFilter, action) => {\r\n    switch (action.type) {\r\n      case CHANGE_FILTER: {\r\n        return action.activeFilter;\r\n      }\r\n      default:\r\n        return state;\r\n    }\r\n  }\r\n\r\nexport const changeFilter = activeFilter => ({type: 'CHANGE_FILTER', activeFilter})\r\n\r\n\r\nexport default filtersReducer;","import React from 'react'\r\nimport SetForm from './set-item'\r\nimport { compose } from 'redux'\r\nimport { addTask, editStatus, deleteTask,removeAllDone} from '../../redux/main-reducer';\r\nimport {changeFilter} from '../../redux/filter-reducer'\r\nimport { connect } from 'react-redux';\r\n\r\n\r\n\r\n\r\nexport class SetFormContainer extends React.Component {\r\n\r\n    render(){\r\n        return (\r\n            <SetForm />\r\n        )\r\n        \r\n    }\r\n}\r\n\r\n\r\nconst mapStateToProps = (state) => {\r\n    return {\r\n        tasks: state.mainReducer.tasks,\r\n        filter: state.filtersReducer\r\n    }\r\n}\r\n\r\n\r\nexport default compose(connect(mapStateToProps,{editStatus ,addTask,deleteTask,changeFilter,removeAllDone}))(SetForm)\r\n    \r\n\r\n","import React from 'react'\nimport s from './App.module.css';\nimport SetFormContainer from './components/SetItem/set-item-container';\n\n\nconst App = () => {\n  \n \n  return (\n    <div className={s.container}>\n       <h1> It's me, <b>Tasker</b>. Let me refresh your memory.</h1>> \n       <SetFormContainer   />\n       <div className={s.made}>Made by <b>Dima Kulikovskiy </b> &#169; 2020</div>\n    </div>\n\n  )\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import { combineReducers, createStore, applyMiddleware } from \"redux\";\r\nimport mainReducer from \"./main-reducer\";\r\nimport filtersReducer from \"./filter-reducer\"\r\nimport thunkMiddleware from \"redux-thunk\";\r\n\r\n\r\n\r\nconst reducers = combineReducers({\r\n    mainReducer,\r\n    filtersReducer\r\n});\r\n\r\n\r\nconst store = createStore(reducers, applyMiddleware(thunkMiddleware))\r\n\r\nexport default store;\r\n\r\nwindow.store = store","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport { Provider } from 'react-redux';\nimport store from './redux/redux-store'\nimport tasks from './redux/main-reducer'\n\n\n\nReactDOM.render(\n  <Provider store={store}>\n    <App />\n  </Provider>,\n  document.getElementById('root')\n)\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}