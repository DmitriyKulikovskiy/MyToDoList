{"version":3,"sources":["App.module.css","components/set-item.jsx","components/item.jsx","App.js","serviceWorker.js","index.js"],"names":["module","exports","SetForm","props","onInputChange","event","setState","target","name","value","handleSubmit","preventDefault","state","text","length","addTask","id","shortid","generate","status","onSubmit","this","onChange","placeholder","className","s","setTask","onClick","add","React","Component","item","editStatus","statusTask","src","task","taskFalse","taskDelete","close","App","tasks","map","showCurrentTasks","i","chooseCurrentTaskStatus","filter","allTaskCompletedDelete","container","currentTasks","key","some","made","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.6f3aa37f.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"main-box\":\"App_main-box__3QpgH\",\"container\":\"App_container__2csWO\",\"currentTasks\":\"App_currentTasks__10M_S\",\"setTask\":\"App_setTask__2BJzV\",\"add\":\"App_add__3D2wN\",\"item\":\"App_item__1B0KE\",\"task\":\"App_task__3DKSB\",\"taskFalse\":\"App_taskFalse__4kbf3\",\"statusTask\":\"App_statusTask__2kSqu\",\"close\":\"App_close__XcBzj\",\"made\":\"App_made__1Jn2h\"};","import React from \"react\";\nimport s from \"./../App.module.css\";\nimport shortid from 'shortid';\n\n\nclass SetForm extends React.Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n          text: ''\n        }\n      }\n\n    onInputChange = event => {\n      this.setState({\n        [event.target.name]: event.target.value\n      })\n    }\n    \n    handleSubmit = event => {\n\n      event.preventDefault();\n\n      if(this.state.text.length === 0) {\n        return null;\n      }\n\n      this.props.addTask({\n        id: shortid.generate(),\n        text: this.state.text,\n        status: false\n      });\n        \n      this.setState({\n        text: ''\n      })\n    }\n\n\n   \n\n  render() {\n    return (\n      <div>\n        <form onSubmit={this.handleSubmit}>\n          <div>\n            <input\n              name={\"text\"}\n              onChange={this.onInputChange}\n              value={this.state.text}\n              placeholder={\"Set your task\"}\n              className={s.setTask}\n            />\n\n            <button onClick={this.handleSubmit} className={s.add}>ADD</button>\n          </div>\n        </form>\n      </div>\n    );\n  }\n}\n\nexport default SetForm;\n","import React from 'react'\nimport s from \"./../App.module.css\";\n\n\n\nexport default props =>  \n    <div className={s.item}>\n        <span onClick={props.editStatus} className={s.statusTask}>\n            {props.status   ? <img src=\"https://img.icons8.com/doodle/48/000000/checkmark.png\"/> \n                            : <img src=\"https://img.icons8.com/emoji/48/000000/red-circle-emoji.png\"/>}\n        </span>\n        \n        <span className={props.status === true ? s.task : s.taskFalse}>{props.text}</span>\n\n\n        <span onClick={props.taskDelete} className={s.close}><img src=\"https://img.icons8.com/color/48/000000/close-window.png\"/></span>\n    </div>\n\n","import React from 'react'\nimport s from './App.module.css';\nimport SetForm from './components/set-item';\nimport Item from './components/item'\n\nclass App extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      tasks: [],\n      chooseCurrentTaskStatus: 'all'\n      \n    }\n  }\n\n  addTask = task => {\n\n    this.setState(state => ({\n      tasks: [task, ...state.tasks]\n    }));\n\n  };\n\n  editStatus = id => {\n    this.setState({\n      tasks: this.state.tasks.map(task => {\n        if(task.id === id) {\n          return {\n            ...task,\n            status: !task.status\n          } \n        } else {\n          return task;\n        }\n      })\n    })\n  }\n\n  showCurrentTasks = (i) => {\n    this.setState({\n      chooseCurrentTaskStatus: i\n    })\n  }\n  \n  taskDelete = (id) => {\n    this.setState({\n      tasks: this.state.tasks.filter(task => task.id !== id)\n    })\n  }\n\n  allTaskCompletedDelete = (id) => {\n    this.setState({\n      tasks: this.state.tasks.filter(task => !task.status)\n    })\n  }\n\n  \n  \n  render() {\n\n    let tasks = [];\n\n    if(this.state.chooseCurrentTaskStatus === 'all') {\n      tasks = this.state.tasks\n    } else if(this.state.chooseCurrentTaskStatus === 'active') {\n      tasks = this.state.tasks.filter(task => !task.status)\n    } else if(this.state.chooseCurrentTaskStatus === 'completed') {\n      tasks = this.state.tasks.filter(task => task.status)\n    }\n\n    return (\n      <div>\n\n        <div className={s.container}>\n          <h1> It's me, <b>Tasker</b>. Let me refresh your memory.</h1>\n\n          <SetForm addTask={this.addTask} />\n\n          <div className={s.currentTasks}> <b>Active tasks:</b> {this.state.tasks.filter(task => !task.status).length} </div>\n\n          {tasks.map(task => (<Item  editStatus={() => this.editStatus(task.id)} \n                                              key={task.id} \n                                              text={task.text}\n                                              status={task.status}\n                                              taskDelete={() => this.taskDelete(task.id)} \n                                               />))}\n          <button onClick={() => this.showCurrentTasks('all') }>All</button>\n          <button onClick={() => this.showCurrentTasks('active') }>active</button>\n          <button onClick={() => this.showCurrentTasks('completed') }>done</button>\n          {this.state.tasks.some(task => task.status) \n              ? <button onClick={this.allTaskCompletedDelete}>remove done</button>\n              : null}   \n\n          <div className={s.made}>\n            Made by <b>Dima Kulikovskiy </b> &#169; 2020\n          </div>\n\n        </div>\n        \n      </div>\n      \n    )\n  }\n}\n\n\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}